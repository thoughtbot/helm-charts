---
# Source: helm-rails/templates/service.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
spec:
  minAvailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
---
# Source: helm-rails/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
spec:
  ports:
  - name: metrics
    port: 9394
    protocol: TCP
    targetPort: metrics
  - name: http
    port: 3000
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
  type: ClusterIP
---
# Source: helm-rails/templates/service.yaml
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app-default-worker
  namespace: default
  labels:
    app.kubernetes.io/component: default-worker
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
  annotations:
    secret.reloader.stakater.com/reload: "secretsmanager"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: default-worker
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
  template:
    metadata:
      labels:
        app.kubernetes.io/component: default-worker
        app.kubernetes.io/instance: production
        app.kubernetes.io/name: example-app
    spec:
      containers:
      - args:
        - sidekiq
        - -q
        - default,10
        - -q
        - mailers,1
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: example-app
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 128m
            memory: 512Mi
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      securityContext:
        fsGroup: 1234
      topologySpreadConstraints:
      - maxSkew: 3
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: default-worker
            app.kubernetes.io/instance: production
            app.kubernetes.io/name: example-app
      volumes:
      - name: postgres
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: postgres
      - name: secretsmanager
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: secretsmanager
---
# Source: helm-rails/templates/service.yaml
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app-reaper
  namespace: default
  labels:
    app.kubernetes.io/component: reaper
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
  annotations:
    secret.reloader.stakater.com/reload: "secretsmanager"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: reaper
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: reaper
        app.kubernetes.io/instance: production
        app.kubernetes.io/name: example-app
    spec:
      containers:
      - command:
        - rails
        - reaper
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: example-app
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 128m
            memory: 512Mi
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      securityContext:
        fsGroup: 1234
      topologySpreadConstraints:
      - maxSkew: 3
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: reaper
            app.kubernetes.io/instance: production
            app.kubernetes.io/name: example-app
      volumes:
      - name: postgres
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: postgres
      - name: secretsmanager
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: secretsmanager
---
# Source: helm-rails/templates/service.yaml
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app-reports-worker
  namespace: default
  labels:
    app.kubernetes.io/component: reports-worker
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
  annotations:
    secret.reloader.stakater.com/reload: "secretsmanager"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: reports-worker
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
  template:
    metadata:
      labels:
        app.kubernetes.io/component: reports-worker
        app.kubernetes.io/instance: production
        app.kubernetes.io/name: example-app
    spec:
      containers:
      - args:
        - sidekiq
        - -q
        - reports
        - -c
        - "1"
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: example-app
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 128m
            memory: 512Mi
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      securityContext:
        fsGroup: 1234
      topologySpreadConstraints:
      - maxSkew: 3
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: reports-worker
            app.kubernetes.io/instance: production
            app.kubernetes.io/name: example-app
      volumes:
      - name: postgres
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: postgres
      - name: secretsmanager
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: secretsmanager
---
# Source: helm-rails/templates/service.yaml
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
  annotations:
    secret.reloader.stakater.com/reload: "secretsmanager"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
  template:
    metadata:
      labels:
        app.kubernetes.io/component: web
        app.kubernetes.io/instance: production
        app.kubernetes.io/name: example-app
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
    spec:
      containers:
      - args:
        - rails
        - server
        env:
        - name: PORT
          value: "3000"
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: example-app
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: example.com
            path: /robots.txt
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 128m
            memory: 512Mi
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      - args:
        - bundle
        - exec
        - prometheus_exporter
        - -b
        - 0.0.0.0
        - --histogram
        env:
        - name: PORT
          value: "9394"
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: prometheus-exporter
        ports:
        - containerPort: 9394
          name: metrics
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 9394
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        readinessProbe:
          failureThreshold: 1
          httpGet:
            httpHeaders:
            - name: Host
              value: example.com
            path: /metrics
            port: 9394
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          limits:
            memory: 64Mi
          requests:
            cpu: 5m
            memory: 32Mi
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      initContainers:
      - args:
        - rails
        - db:abort_if_pending_migrations
        envFrom:
        - configMapRef:
            name: example-app-env
        - secretRef:
            name: postgres
        - secretRef:
            name: secretsmanager
        image: docker.io/myimage:458cd7e
        imagePullPolicy: IfNotPresent
        name: migrations
        volumeMounts:
        - name: postgres
          mountPath: /csiSecrets/postgres
          readOnly: true
        - name: secretsmanager
          mountPath: /secretsmanager
          readOnly: true
      securityContext:
        fsGroup: 1234
      topologySpreadConstraints:
      - maxSkew: 3
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: web
            app.kubernetes.io/instance: production
            app.kubernetes.io/name: example-app
      volumes:
      - name: postgres
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: postgres
      - name: secretsmanager
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: secretsmanager
---
# Source: helm-rails/templates/service.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: example-app-default-worker
  namespace: default
  labels:
    app.kubernetes.io/component: default-worker
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-app-default-worker
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - object:
      metric:
        name: ruby_sidekiq_queue_latency_seconds_95p1m
      target:
        type: Value
        value: 1
      describedObject:
        apiVersion: v1
        kind: Service
        name: example-app-default-worker
    type: Object
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Pods
        value: 1
      stabilizationWindowSeconds: 120
    scaleUp:
      policies:
      - periodSeconds: 120
        type: Percent
        value: 25
      - periodSeconds: 120
        type: Pods
        value: 3
      selectPolicy: Max
---
# Source: helm-rails/templates/service.yaml
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-app-web
  minReplicas: 3
  maxReplicas: 24
  metrics:
  - object:
      metric:
        name: ruby_http_queue_duration_seconds_95p1m
      target:
        type: Value
        value: 50m
      describedObject:
        apiVersion: v1
        kind: Service
        name: web-service
    type: Object
  - pods:
      metric:
        name: ruby_http_requests_per_second
      target:
        averageValue: 11
        type: AverageValue
    type: Pods
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Pods
        value: 1
      stabilizationWindowSeconds: 120
    scaleUp:
      policies:
      - periodSeconds: 120
        type: Percent
        value: 25
      - periodSeconds: 120
        type: Pods
        value: 3
      selectPolicy: Max
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
---
---
# Source: helm-rails/templates/service.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: example-app-default-worker
  namespace: default
  labels:
    app.kubernetes.io/component: default-worker
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
    prometheus: flightdeck-prometheus
spec:
  endpoints:
  - port: metrics
  selector:
    matchLabels:
      app.kubernetes.io/component: default-worker
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
---
# Source: helm-rails/templates/service.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: example-app-reaper
  namespace: default
  labels:
    app.kubernetes.io/component: reaper
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
    prometheus: flightdeck-prometheus
spec:
  endpoints:
  - port: metrics
  selector:
    matchLabels:
      app.kubernetes.io/component: reaper
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
---
# Source: helm-rails/templates/service.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: example-app-reports-worker
  namespace: default
  labels:
    app.kubernetes.io/component: reports-worker
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
    prometheus: flightdeck-prometheus
spec:
  endpoints:
  - port: metrics
  selector:
    matchLabels:
      app.kubernetes.io/component: reports-worker
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
---
# Source: helm-rails/templates/service.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
    prometheus: flightdeck-prometheus
spec:
  endpoints:
  - port: metrics
  selector:
    matchLabels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: production
      app.kubernetes.io/name: example-app
---
# Source: helm-rails/templates/service.yaml
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: example-app-web
  namespace: default
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: production
    app.kubernetes.io/name: example-app
    app.kubernetes.io/version: "458cd7e"
    app.kubernetes.io/managed-by: Helm
    initiator: githubActions
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-app-web
  updatePolicy:
    updateMode: Auto
  resourcePolicy:
    containerPolicies:
